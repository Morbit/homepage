{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["loader","GLTFLoader","App","state","color","tire","rim","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","renderScene","window","delta","clock","getDelta","orbitControls","update","renderer","render","scene","camera","handleColorChange","setState","carModel","traverse","child","isMesh","userData","colored","material","setHex","handleCheckboxChange","type","e","target","checked","handleShowParts","handleHideParts","visible","width","this","mount","clientWidth","height","clientHeight","THREE","position","z","antialias","setClearColor","setSize","appendChild","domElement","OrbitControls","maxPolarAngle","Math","PI","minPolarAngle","enableZoom","hemisphereLight","add","load","gltf","children","translateZ","undefined","error","console","removeChild","className","style","ref","name","onChange","backgroundColor","Component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c8634f6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport OrbitControls from 'three-orbitcontrols';\n\nconst loader = new GLTFLoader();\n\nclass App extends Component {\n  state = {\n    color: '0000ff',\n    tire: true,\n    rim: true\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth\n    const height = this.mount.clientHeight\n\n    this.clock = new THREE.Clock();\n\n    //ADD SCENE\n    this.scene = new THREE.Scene();\n    //ADD CAMERA\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      width / height,\n      0.1,\n      1000\n    )\n    this.camera.position.z = 1\n\n    //ADD RENDERER\n    this.renderer = new THREE.WebGLRenderer({ antialias: true })\n    this.renderer.setClearColor('#fff')\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    //TRACK CONTROL\n    this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.orbitControls.maxPolarAngle = Math.PI / 2;\n    this.orbitControls.minPolarAngle = Math.PI / 2;\n    this.orbitControls.enableZoom = false;\n\n    const hemisphereLight = new THREE.HemisphereLight(0xffffff, 0x000000, 1);\n    this.scene.add(hemisphereLight);\n\n    loader.load('scene.gltf', gltf => {\n\n      this.carModel = gltf.scene.children[0];\n      this.carModel.translateZ(-0.5);\n\n      this.scene.add(gltf.scene);\n    }, undefined, function (error) {\n      console.error({ error });\n    });\n\n    this.start()\n  }\n\n  componentWillUnmount() {\n    this.stop()\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate)\n    }\n  }\n\n  stop = () => {\n    cancelAnimationFrame(this.frameId)\n  }\n\n  animate = () => {\n    this.renderScene()\n    this.frameId = window.requestAnimationFrame(this.animate)\n  }\n\n  renderScene = () => {\n    const delta = this.clock.getDelta();\n    this.orbitControls.update(delta);\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  handleColorChange = color => () => {\n    this.setState({ color }, () => {\n      this.carModel.traverse(child => {\n        if (child.isMesh && child.userData.colored) {\n          child.material.color.setHex(`0x${color}`);\n        }\n      });\n    })\n  }\n\n  handleCheckboxChange = type => e => {\n\n    if (e.target.checked) {\n      this.handleShowParts(type);\n    } else {\n      this.handleHideParts(type);\n    }\n  }\n\n  handleHideParts = type => {\n    this.setState({ [type]: false }, () => {\n      this.carModel.traverse(child => {\n        if (child.isMesh && child.userData.type && child.userData.type === type) {\n          child.visible = false;\n        }\n      });\n    })\n  }\n\n  handleShowParts = type => {\n    this.setState({ [type]: true }, () => {\n      this.carModel.traverse(child => {\n        if (child.isMesh && child.userData.type && child.userData.type === type) {\n          child.visible = true;\n        }\n      });\n    })\n  }\n\n  render() {\n    const { color, tire, rim } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-content\">\n          <div\n            className=\"App-model\"\n            style={{ width: '600px', height: '400px' }}\n            ref={(mount) => { this.mount = mount }}\n          />\n          <div>\n            <div className=\"App-colors\">\n              <label>\n                <input checked={color === \"aaa9aa\"} type=\"radio\" name=\"color\" onChange={this.handleColorChange('aaa9aa')} />\n                <span className=\"App-color\" style={{ backgroundColor: \"#aaa9aa\" }}></span>\n                <span>Pearl White Multi-Coat</span>\n              </label>\n              <label>\n                <input checked={color === \"8b0018\"} type=\"radio\" name=\"color\" onChange={this.handleColorChange('8b0018')} />\n                <span className=\"App-color\" style={{ backgroundColor: \"#8b0018\" }}></span>\n                <span>Red Multi-Coat</span>\n              </label>\n              <label>\n                <input checked={color === \"0000ff\"} type=\"radio\" name=\"color\" onChange={this.handleColorChange('0000ff')} />\n                <span className=\"App-color\" style={{ backgroundColor: \"#0000ff\" }}></span>\n                <span>Deep Blue</span>\n              </label>\n            </div>\n\n            <div className=\"App-parts\">\n              <label>\n                <input type=\"checkbox\" checked={tire} onChange={this.handleCheckboxChange('tire')} />\n                <span>Show Tires</span>\n              </label>\n              <label>\n                <input type=\"checkbox\" checked={rim} onChange={this.handleCheckboxChange('rim')} />\n                <span>Show Rims</span>\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}