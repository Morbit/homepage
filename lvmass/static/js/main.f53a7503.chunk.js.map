{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","height","weight","IVSTd","LVIDd","PWTd","handleChange","field","e","_this","setState","Object","defineProperty","target","value","getBSA","h","parseFloat","w","Math","pow","getLVVm","_this$state","this","bsa","lvvm","LVmassPenn","LVmassASE","react_default","a","createElement","className","Typography_default","variant","gutterBottom","Grid_default","container","spacing","item","xs","TextField_default","id","label","onChange","margin","type","toFixed","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f53a7503.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    height: 176,\n    weight: 70,\n    IVSTd: 1,\n    LVIDd: 1,\n    PWTd: 1,\n  };\n\n  handleChange = field => e =>{\n    this.setState({ [field]: e.target.value });\n  }\n\n  getBSA = (height, weight) => {\n    const h = parseFloat(height);\n    const w = parseFloat(weight);\n    return 0.007184 * Math.pow(h, 0.725) * Math.pow(w, 0.425);\n  }\n\n  getLVVm = (IVSTd, LVIDd, PWTd) => {\n    return Math.pow(parseFloat(IVSTd) + parseFloat(LVIDd) + parseFloat(PWTd), 3) - Math.pow(parseFloat(LVIDd), 3);\n  }\n\n  render() {\n    const { height, weight, IVSTd, LVIDd, PWTd } = this.state;\n    const bsa = this.getBSA(height, weight);\n    const lvvm = this.getLVVm(IVSTd, LVIDd, PWTd);\n\n    const LVmassPenn = 1.04 * lvvm - 13.6;\n    const LVmassASE = 1.04 * lvvm * 0.8 + 0.6;\n\n    return (\n      <div className=\"content\">\n      <Typography variant=\"h4\" gutterBottom>\n        ILVmass calculator\n      </Typography>\n\n      <Grid container spacing={16}>\n        <Grid item xs={6}>\n          <div>\n            <TextField\n              id=\"height\"\n              label=\"Height, cm\"\n              value={height}\n              onChange={this.handleChange('height')}\n              margin=\"normal\"\n              type=\"number\"\n            />\n          </div>\n\n          <div>\n            <TextField\n              id=\"weight\"\n              label=\"Weight, kg\"\n              value={weight}\n              onChange={this.handleChange('weight')}\n              margin=\"normal\"\n              type=\"number\"\n            />\n          </div>\n        </Grid>\n\n        <Grid item xs={6}>\n          <div>\n            <TextField\n              id=\"ivstd\"\n              label=\"IVSTd, cm\"\n              value={IVSTd}\n              onChange={this.handleChange('IVSTd')}\n              margin=\"normal\"\n              type=\"number\"\n            />\n          </div>\n\n          <div>\n            <TextField\n              id=\"lvidd\"\n              label=\"LVIDd, cm\"\n              value={LVIDd}\n              onChange={this.handleChange('LVIDd')}\n              margin=\"normal\"\n              type=\"number\"\n            />\n          </div>\n\n          <div>\n            <TextField\n              id=\"lvidd\"\n              label=\"PWTd, cm\"\n              value={PWTd}\n              onChange={this.handleChange('PWTd')}\n              margin=\"normal\"\n              type=\"number\"\n            />\n          </div>\n        </Grid>\n      </Grid>\n\n      <br />\n      <br />\n\n        <Typography variant=\"h6\" gutterBottom>\n          <b>BSA:</b> {bsa.toFixed(2)}, m<sup>2</sup>\n          <br />\n          <b>LVVm:</b> {lvvm.toFixed(2)}, cm<sup>3</sup>\n          <br />\n          <b>LVmass (Penn):</b> {LVmassPenn.toFixed(2)}, g\n          <br />\n          <b>LVmass (ASE):</b> {LVmassASE.toFixed(2)}, g\n          <br />\n          <b>ILVmass (Penn):</b> {(LVmassPenn / bsa).toFixed(2)}, g/m<sup>2</sup>\n          <br />\n          <b>ILVmass (ASE):</b> {(LVmassASE / bsa).toFixed(2)}, g/m<sup>2</sup>\n        </Typography>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}